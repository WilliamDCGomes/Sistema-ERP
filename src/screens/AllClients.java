package screens;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import connectionbd.ConnectionModule;
import formattingmask.MaskCPFAndCNPJ;
import formattingmask.MaskUpperLetter;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Lenovo
 */
public class AllClients extends javax.swing.JFrame {
    int x = 0;
    int x2 = 0;
    int x3 = 0;
    Connection connection = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    /**
     * Creates new form Client
     */
    public AllClients() {
        initComponents();
        ConnectionModule connect = new ConnectionModule();
        connection = connect.getConnectionMySQL();
        inputNameClient.setDocument(new MaskUpperLetter());
        inputCPFClient.setDocument(new MaskCPFAndCNPJ());
    }
    private void getAllClients(){
        String sql ="select id as 'Código', clientName as 'Nome', cpf as 'CPF', email as 'Email', phone as 'Telefone', cellPhone as 'Celular' from clients";
        try {
            pst=connection.prepareStatement(sql);
            rs= pst.executeQuery();
            tableClients.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void getClientsCPF(){
        String sql ="select id as 'Código', clientName as 'Nome', cpf as 'CPF', email as 'Email', phone as 'Telefone', cellPhone as 'Celular' from clients where cpf like '" + inputCPFClient.getText() + "%'";
        try {
            pst=connection.prepareStatement(sql);
            rs = pst.executeQuery();
            tableClients.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void getClientsName(){
        String sql ="select id as 'Código', clientName as 'Nome', cpf as 'CPF', email as 'Email', phone as 'Telefone', cellPhone as 'Celular' from clients where clientName like '" + inputNameClient.getText() + "%'";
        try {
            pst=connection.prepareStatement(sql);
            rs = pst.executeQuery();
            tableClients.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void getClientsCPFAndName(){
        String sql ="select id as 'Código', clientName as 'Nome', cpf as 'CPF', email as 'Email', phone as 'Telefone', cellPhone as 'Celular' from clients where cpf like '" + inputCPFClient.getText() + "%' and clientName like '" + inputNameClient.getText() + "%'";
        try {
            pst=connection.prepareStatement(sql);
            rs = pst.executeQuery();
            tableClients.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputCPFClient = new javax.swing.JTextField();
        txtAllClients = new javax.swing.JLabel();
        tableAllClients = new javax.swing.JScrollPane();
        tableClients = new javax.swing.JTable();
        buttonShowClient = new javax.swing.JButton();
        inputNameClient = new javax.swing.JTextField();
        buttonPrinter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Todos os Clientes");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        inputCPFClient.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        inputCPFClient.setText("CPF DO CLIENTE");
        inputCPFClient.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputCPFClientFocusGained(evt);
            }
        });
        inputCPFClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputCPFClientKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputCPFClientKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputCPFClientKeyTyped(evt);
            }
        });
        getContentPane().add(inputCPFClient);
        inputCPFClient.setBounds(290, 60, 256, 30);

        txtAllClients.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        txtAllClients.setText("TODOS OS CLIENTES");
        getContentPane().add(txtAllClients);
        txtAllClients.setBounds(280, 10, 251, 32);

        tableClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Nome", "CPF", "Email", "Telefone", "Celular"
            }
        ));
        tableAllClients.setViewportView(tableClients);

        getContentPane().add(tableAllClients);
        tableAllClients.setBounds(10, 110, 760, 270);

        buttonShowClient.setText("MOSTRAR");
        buttonShowClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowClientActionPerformed(evt);
            }
        });
        getContentPane().add(buttonShowClient);
        buttonShowClient.setBounds(570, 60, 90, 30);

        inputNameClient.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        inputNameClient.setText("NOME DO CLIENTE");
        inputNameClient.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputNameClientFocusGained(evt);
            }
        });
        inputNameClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputNameClientKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputNameClientKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputNameClientKeyTyped(evt);
            }
        });
        getContentPane().add(inputNameClient);
        inputNameClient.setBounds(10, 60, 256, 30);

        buttonPrinter.setText("IMPRIMIR");
        getContentPane().add(buttonPrinter);
        buttonPrinter.setBounds(680, 60, 90, 30);

        setSize(new java.awt.Dimension(791, 438));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonShowClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowClientActionPerformed
        int set = tableClients.getSelectedRow();
        if(set>=0){
            ClientScreen clientScreen = new ClientScreen();
            clientScreen.setTitle("Cliente: " + tableClients.getModel().getValueAt(set,0).toString());
            clientScreen.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "SELECIONE UM REGISTRO ANTES");
        }
    }//GEN-LAST:event_buttonShowClientActionPerformed

    private void inputCPFClientKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputCPFClientKeyPressed
        
    }//GEN-LAST:event_inputCPFClientKeyPressed

    private void inputCPFClientFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputCPFClientFocusGained
        inputCPFClient.selectAll();
    }//GEN-LAST:event_inputCPFClientFocusGained

    private void inputCPFClientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputCPFClientKeyReleased
        if(!inputCPFClient.getText().equals("CPF DO CLIENTE")&&inputNameClient.getText().equals("NOME DO CLIENTE")){
            getClientsCPF();
        }
        else if(!inputCPFClient.getText().equals("CPF DO CLIENTE")&&!inputNameClient.getText().equals("NOME DO CLIENTE")){
            getClientsCPFAndName();
        }
    }//GEN-LAST:event_inputCPFClientKeyReleased

    private void inputCPFClientKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputCPFClientKeyTyped
        if(inputCPFClient.getText().equals("")){
            inputCPFClient.setText("CPF DO CLIENTE");
            getAllClients();
            x=0;
        }
        else if(x==0){
            x++;
            inputCPFClient.setText("");
        }
    }//GEN-LAST:event_inputCPFClientKeyTyped

    private void inputNameClientFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputNameClientFocusGained
        inputNameClient.selectAll();
    }//GEN-LAST:event_inputNameClientFocusGained

    private void inputNameClientKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNameClientKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNameClientKeyPressed

    private void inputNameClientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNameClientKeyReleased
        if(!inputNameClient.getText().equals("NOME DO CLIENTE")&&inputCPFClient.getText().equals("CPF DO CLIENTE")){
            getClientsName();
        }
        else if(!inputCPFClient.getText().equals("CPF DO CLIENTE")&&!inputNameClient.getText().equals("NOME DO CLIENTE")){
            getClientsCPFAndName();
        }
    }//GEN-LAST:event_inputNameClientKeyReleased

    private void inputNameClientKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNameClientKeyTyped
        if(inputNameClient.getText().equals("")){
            inputNameClient.setText("NOME DO CLIENTE");
            getAllClients();
            x2=0;
        }
        else if(x2==0){
            x2++;
            inputNameClient.setText("");
        }
    }//GEN-LAST:event_inputNameClientKeyTyped

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(x3==0){
            x3++;
            inputNameClient.setText("NOME DO CLIENTE");
            inputCPFClient.setText("CPF DO CLIENTE");
            getAllClients();
        }
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllClients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPrinter;
    private javax.swing.JButton buttonShowClient;
    private javax.swing.JTextField inputCPFClient;
    private javax.swing.JTextField inputNameClient;
    private javax.swing.JScrollPane tableAllClients;
    private javax.swing.JTable tableClients;
    private javax.swing.JLabel txtAllClients;
    // End of variables declaration//GEN-END:variables
}
