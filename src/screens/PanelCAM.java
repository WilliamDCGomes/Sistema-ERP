/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package screens;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author willi_bg
 */
public class PanelCAM extends javax.swing.JPanel implements Runnable{
    private VideoCapture video;
    private Mat frame;
    private BufferedImage buffer;
    /**
     * Creates new form PanelCAM
     */
    public PanelCAM() {
        initComponents();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        new Thread(this).start();
    }
    @Override
    public void paintComponent(Graphics graph){
        super.paintComponent(graph);
        if(buffer==null){
            return;
        }
        graph.drawImage(buffer, 10, 20, buffer.getWidth(), buffer.getHeight(), null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        this.video = new VideoCapture(0);
        this.frame = new Mat();
        if(video.isOpened()){
            while(true){
                video.read(frame);
                if(!frame.empty()){
                    MatToBufferedImage(frame);
                    this.repaint();
                }
                if(!video.isOpened()){
                    break;
                }
            }
        }
    }

    private void MatToBufferedImage(Mat mat) {
        int width = mat.width();
        int height = mat.height();
        int channel = mat.channels();
        byte[] source = new byte[width * height * channel];
        mat.get(0, 0, source);
        buffer = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
        final byte[] out = ((DataBufferByte) buffer.getRaster().getDataBuffer()).getData();
        System.arraycopy(source, 0, out, 0, source.length);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
